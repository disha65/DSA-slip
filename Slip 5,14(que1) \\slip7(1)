Slip 5_1, Slip 14_1:.Create a random array of n integers. Accept a value x from user and use 
linear search algorithm to check whether the number is present in the array or not and output 
the position if the number is present.

Solution : 
#include<stdio.h> 
void linearsearch(int a[10],int n,int sr) 
{ int i,p,cnt=0; 
for(i=0;i<n;i++) 
{ 
if(a[i]==sr) 
{ p=i; //store position 
cnt++; 
break; 
} 
} 
if(cnt>=1) 
printf("element found at %d position",p); 
else 
printf("element NOT found "); 
} 
main() 
{ 
int n,i,sr,a[10]; 
printf("enter how many values"); 
scanf("%d",&n); 
for(i=0;i<n;i++) 
{ 
printf("enter values"); 
scanf("%d",&a[i]); 
} 
printf("\n enter search element"); 
scanf("%d",&sr); 
linearsearch(a,n,sr); 
}

##########
Slip 7_1 : Sort a random array of n integers (accept the value of n from user) in ascending 
order by using quick sort algorithm. 
Solution : 
#include<stdio.h> 
void quicksort(int a[10],int lb,int ub); 
main() 
{ int n ,a[10],i,sr,j,temp; 
printf("\n enter no of elements"); 
scanf("%d",&n); 
for(i=0;i<n;i++) 
{ 
//printf("Enter no "); 
a[i]=rand()%100; 
} 
printf("\n Before sorted array is "); 
for(i=0;i<n;i++) 
{ 
printf("%d ",a[i]); 
} 
quicksort(a,0,n-1); 
printf("\n Sorted array is "); 
for(i=0;i<n;i++) 
{ 
printf("%d ",a[i]); 
} 
} 
void quicksort(int a[10],int lb,int ub) 
{ int key,temp,i,j; 
if(lb<ub) 
{ 
i=lb+1; 
key=a[lb]; 
j=ub; 
while(i<=j) 
{ 
while(a[i]<=key && i<=ub) 
i++; 
while(a[j]>key && j>=lb) 
j--; 
if(i<j)
{ 
temp=a[i]; 
a[i]=a[j]; 
a[j]=temp; 
} 
} 
//swap key and a[j] 
temp=a[j]; 
a[j]=a[lb]; 
a[lb]=temp; 
quicksort(a,lb,j-1); 
quicksort(a,j+1,ub); 
} 
}
